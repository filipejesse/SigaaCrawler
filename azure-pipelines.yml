# Build ASP.NET Core project using Azure Pipelines
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core?view=vsts

pool:
  vmImage: 'ubuntu-16.04' # other options: 'macOS-10.13', 'vs2017-win2016'


  
variables:
  buildConfiguration: 'Release'
  imageName: 'dotnetcore:$(Build.BuildId)'


steps:
- script: |

    # Restore dependences https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core?view=vsts&tabs=yaml#restore-dependencies
    dotnet restore
    dotnet build --configuration $(buildConfiguration) # Include additional options such as --configuration to meet your need
    dotnet test dotnetcore-tests --configuration $(buildConfiguration) --logger trx
    
    # Publishing the output of the build
    dotnet publish --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
    # You can run any dotnet command in your pipeline. The following example shows how to install and use a .NET global tool, dotnetsay:
    # https://www.nuget.org/packages/dotnetsay/
    # dotnet tool install -g dotnetsay
    # dotnetsay
    # Above in reference with dotnetsay command this is the original way about install it. But there is this bug
    # https://developercommunity.visualstudio.com/content/problem/340067/install-global-tool.html?childToView=343864#comment-343864
    # which was soleved with this comment issue https://github.com/dotnet/cli/issues/8368#issuecomment-424852996

    dotnet tool install  --tool-path . dotnetsay
    ./dotnetsay
  displayName: 'Command Line Script'    


- task: DotNetCoreInstaller@0
  inputs:
    version: '3.1.100' # replace this value with the version that you need for your project

# Use the .NET Core task to run unit tests in your .NET Core solution by using testing frameworks like MSTest, xUnit, and NUnit. 
# THere is a warning # #[warning]Project file(s) matching the specified pattern were not found. 
# https://stackoverflow.com/a/53053739/2773461 I should check it in depth.

- task: PublishBuildArtifacts@1

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True
